<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd"
	default-lazy-init="true">

	<context:component-scan base-package="org.whocares.weather" />
	
	<context:property-placeholder location="classpath:redis.properties, classpath:jdbc.properties" />
	
	<!-- redis config begin -->
	<bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="password" value="${redis.password}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxTotal" value="${redis.maxTotal}" />
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    
     <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory" />
        <property name="enableTransactionSupport" value="true" /><!-- 开启事务 -->
    </bean>
	<!-- redis config end -->
	
	<!-- mybatis config begin -->
	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 池启动时创建的连接数量 -->
		<property name="initialSize" value="5" />
		<!-- 同一时间可以从池分配的最多连接数量。设置为0时表示无限制。 -->
		<!-- <property name="maxActive" value="30" /> -->
		<!-- 池里不会被释放的最多空闲连接数量。设置为0时表示无限制。 -->
		<property name="maxIdle" value="20" />
		<!-- 在不新建连接的条件下，池中保持空闲的最少连接数。 -->
		<property name="minIdle" value="3" />
		<!-- 设置自动回收超时连接 -->
		<!-- <property name="removeAbandoned" value="true" /> -->
		<!-- 自动回收超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="200" />
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true" />
		<!-- 等待超时以毫秒为单位，在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。 -->
		<!-- <property name="maxWait" value="100" /> -->
		<property name="validationQuery" value="select count(1) from test" />
		<property name="testOnCreate" value="true" />
	</bean>
	
	<bean id="testMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
       <property name="mapperInterface" value="org.whocares.weather.mapper.TestMapper" />  
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />  
    </bean>
	<!-- mybatis config end -->
	
	<tx:annotation-driven proxy-target-class="false" />
	<!-- 注册通用解析对象到redis的模板类 -->
	<bean class = "org.whocares.weather.app.dao.template.DailyTemperProccessObjTemplate"/>
	
</beans>